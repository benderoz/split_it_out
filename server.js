const express = require('express');
const multer = require('multer');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const FormData = require('form-data');
const sharp = require('sharp');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});

app.use(limiter);
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));
app.use(express.static('public'));

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadsDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'receipt-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
    }
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
async function analyzeReceiptWithGemini(imagePath) {
  try {
    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const compressedImagePath = path.join(uploadsDir, 'compressed-' + path.basename(imagePath));
    await sharp(imagePath)
      .resize(1200, null, { withoutEnlargement: true })
      .jpeg({ quality: 85 })
      .toFile(compressedImagePath);

    // –ß–∏—Ç–∞–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = fs.readFileSync(compressedImagePath);
    const imageBase64 = imageBuffer.toString('base64');

    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —á–µ–∫ –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ. 
–í–∞–∂–Ω–æ: –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∂–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–¥–µ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –≤–µ—Ä—Ö–∞ (top) –∏ –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ (height).

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
{
  "items": [
    {
      "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏",
      "price": —á–∏—Å–ª–æ_—Ü–µ–Ω–∞,
      "top": –ø—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç_–≤–µ—Ä—Ö–∞_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,
      "height": –≤—ã—Å–æ—Ç–∞_—Å—Ç—Ä–æ–∫–∏_–≤_–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    }
  ],
  "total": –æ–±—â–∞—è_—Å—É–º–º–∞,
  "currency": "–≤–∞–ª—é—Ç–∞"
}

–ü—Ä–∞–≤–∏–ª–∞:
1. –ò–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ü–µ–Ω–∞–º–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Ç–æ–≥–∏, –Ω–∞–ª–æ–≥–∏)
2. –¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç
3. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã top –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ (0% = –≤–µ—Ä—Ö, 100% = –Ω–∏–∑)
4. height - –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ–±—ã—á–Ω–æ 3-5%)
5. –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ—è—Å–Ω–∞, –Ω–µ –≤–∫–ª—é—á–∞–π –ø–æ–∑–∏—Ü–∏—é
6. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [{
          parts: [
            { text: prompt },
            {
              inline_data: {
                mime_type: "image/jpeg",
                data: imageBase64
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.1,
          topK: 32,
          topP: 1,
          maxOutputTokens: 4096,
        }
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 30000
      }
    );

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    fs.unlinkSync(compressedImagePath);
    fs.unlinkSync(imagePath);

    const result = response.data.candidates[0].content.parts[0].text;
    
    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanResult = result.replace(/```json\n?|\n?```/g, '').trim();
    
    return JSON.parse(cleanResult);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ–∫–∞:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// API –º–∞—Ä—à—Ä—É—Ç—ã

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —á–µ–∫–∞
app.post('/api/upload-receipt', upload.single('receipt'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ–∫:', req.file.filename);
    const analysis = await analyzeReceiptWithGemini(req.file.path);
    
    res.json({
      success: true,
      data: analysis,
      message: '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ–∫–∞', 
      details: error.message 
    });
  }
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post('/webhook', express.json(), (req, res) => {
  console.log('Webhook –ø–æ–ª—É—á–µ–Ω:', req.body);
  
  const { message } = req.body;
  
  if (message && message.text === '/start') {
    const webAppUrl = `${process.env.WEBHOOK_URL || 'http://localhost:3000'}`;
    
    bot.sendMessage(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: webAppUrl }
          }
        ]]
      }
    });
  }
  
  res.status(200).send('OK');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    details: process.env.NODE_ENV === 'development' ? error.message : undefined
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üì± Web App URL: http://localhost:${port}`);
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
  if (process.env.NODE_ENV === 'production' && process.env.WEBHOOK_URL) {
    bot.setWebHook(`${process.env.WEBHOOK_URL}/webhook`)
      .then(() => console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))
      .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err));
  }
});

module.exports = app;